{ lib
, stdenv
, fetchFromGitHub
, cmake
, wrapQtAppsHook

, boost178
, bzip2
, CoinMP
, doxygen
, eigen
, glpk
, kissfft
, libsvm
, openmp
, python3
, xercesc
, xz
, yaml-cpp
, zlib
, zstd

, enablePython ? true
}:

let
  pythonAndPackages =
    python3.withPackages (py-pkgs: with py-pkgs; [
      autowrap
      cython
      numpy
      pandas
      pip
      pytest
      setuptools
      wheel
    ]);

in
stdenv.mkDerivation rec {
  pname = "OpenMS";
  version = "3.2.0";

  src = fetchFromGitHub {
    owner = "OpenMS";
    repo = "OpenMS";
    rev = "refs/tags/release/${version}";
    hash = "sha256-+9d1r7dn43HvM2WrEYg3GLyVAHmibGVmZlIh1alEpTc=";
  };

  # doCheck = true;
  # checkTarget = "test";

  nativeBuildInputs = [
    cmake
    doxygen
    wrapQtAppsHook
  ];

  cmakeFlags = [
    # Builds don't have access to the network:
    "-DENABLE_UPDATE_CHECK=OFF"

    # Boost in nixpkgs doesn't have static libs:
    "-DBOOST_USE_STATIC=OFF"

    # Can't run GUI tools during the build:
    "-DHAS_XSERVER=OFF"

    # Git objects not available at build time:
    "-DGIT_TRACKING=OFF"

  ] ++ lib.optional enablePython "-DPYOPENMS=ON";

  buildInputs = [
    boost178
    bzip2
    CoinMP
    eigen
    glpk
    kissfft
    libsvm
    openmp
    xercesc
    xz
    yaml-cpp
    zlib
    zstd
  ] ++ lib.optional enablePython pythonAndPackages;

  passthru = {

    # Compute the name of the Python wheel file that is generated by
    # the build system:
    wheelName =
      let
        system = lib.splitString "-" stdenv.system;
        cpu = builtins.elemAt system 0;
        os = builtins.elemAt system 1;
        pyver = lib.concatStrings (lib.take 2 (lib.splitString "." python3.version));
      in
      "pyopenms-${version}-cp${pyver}-cp${pyver}-${os}_${cpu}.whl";
  };

  postBuild = lib.optionalString enablePython ''
    make pyopenms
  '';

  postInstall = lib.optionalString enablePython ''
    mkdir -p "$out/share/whl"
    cp pyOpenMS/dist/${passthru.wheelName} "$out/share/whl/"
  '';
}
